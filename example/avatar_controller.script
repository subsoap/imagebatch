go.property("avatar_width", 100)
go.property("avatar_height", 100)
go.property("tilesource_width", 1000)
go.property("tilesource_height", 1000)
go.property("atlas_width", 1024)
go.property("atlas_height", 1024)

local function do_image(self, id)
	self.dimensions = {x = self.tilesource_width / self.avatar_width, y = self.tilesource_height / self.avatar_height}
	
	self.height = self.atlas_height
	self.width = self.atlas_width
	if self.buffer == nil then
		self.buffer = buffer.create(self.width * self.height, { {name=hash("rgb"), type=buffer.VALUE_TYPE_UINT8, count=3} } )
	end
	self.stream = buffer.get_stream(self.buffer, hash("rgb"))

	y_offset = (self.atlas_height - self.avatar_height) - ((math.floor((id - 1)/self.dimensions.x)) * self.avatar_height)
	x_offset = (math.fmod(id - 1, self.dimensions.x)) * self.avatar_width

	for y = 0, self.avatar_width - 1 do
		for x = 0, self.avatar_width - 1 do
			-- images are incorrectly flipped horizontally atm
			local index = ((y + y_offset) * self.atlas_width + (x + x_offset)) * 3 +1 
			local index2 = ((y) * self.avatar_width + (x)) * 3 +1
			self.stream[(index + 0)] = string.byte(self.images[id].data, index2 + 0 )
			self.stream[(index + 1)] = string.byte(self.images[id].data, index2 + 1 )
			self.stream[(index + 2)] = string.byte(self.images[id].data, index2 + 2 )
		end
	end


	self.resource_path = go.get("#sprite", "texture0")
	self.header = { width=self.width, height=self.height, type=resource.TEXTURE_TYPE_2D, format=resource.TEXTURE_FORMAT_RGB, num_mip_maps=1 }
	resource.set_texture( self.resource_path, self.header, self.buffer )
	self.images[id].status = true
end

local function download_image(self, image_url, callback, id, expected_width, expected_height)
	-- should add image caching based on url
	http.request(image_url, "GET", function(self, _, res)
		if (res.status == 200 or res.status == 302 or res.status == 304) then

			local image = image.load(res.response, true)

			if expected_width ~= image.width or expected_height ~= image.height then
			end
			
			self.images[id] = {}
			self.images[id].type = image.type
			self.images[id].width = image.width
			self.images[id].height = image.height
			self.images[id].data = image.buffer
			
			callback(self, id)
		else
			print("Something went wrong!")
			-- should add a retry queue here
			pprint(res)
		end
		
	end)
	
end



function init(self)
	self.images = {}
	
	download_image(self, "https://i.imgur.com/cq6tcIF.png", do_image, 1)
	download_image(self, "https://i.imgur.com/tYxq0fL.png", do_image, 2)
	download_image(self, "https://i.imgur.com/j2VGVzG.png", do_image, 3)
	download_image(self, "https://i.imgur.com/zdyfMQB.png", do_image, 4)
	download_image(self, "https://i.imgur.com/zdyfMQB.png", do_image, 5)
	download_image(self, "https://i.imgur.com/zdyfMQB.png", do_image, 6)
	
	msg.post("#sprite", "disable")


end

function final(self)
	-- Add finalization code here
	-- Remove this function if not needed
end

function update(self, dt)

	--resource.set_texture( self.resource_path, self.header, self.buffer )
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	-- Add input-handling code here
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end
