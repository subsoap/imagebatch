go.property("avatar_width", 128)
go.property("avatar_height", 128)
go.property("tilesource_width", 1024)
go.property("tilesource_height", 1024)

local function do_image(self, id)
	self.height = self.tilesource_height
	self.width = self.tilesource_width
	if self.buffer == nil then
		self.buffer = buffer.create(self.width * self.height, { {name=hash("rgb"), type=buffer.VALUE_TYPE_UINT8, count=3} } )
	end
	self.stream = buffer.get_stream(self.buffer, hash("rgb"))
	pprint(self.images)
	self.source_stream = buffer.get_stream(self.images[id].data, hash("pixels"))

	y_offset = 0
	x_offset = (id - 1) * self.avatar_width

	for y = 0, self.avatar_width - 1 do
		for x = 0, self.avatar_width - 1 do
			local index = ((y + y_offset) * self.tilesource_width + (x + x_offset)) * 3 +1 
			local index2 = ((y) * self.avatar_width + (x)) * 3 +1
			self.stream[(index + 0)] = self.source_stream[(index2 + 0)]
			self.stream[(index + 1)] = self.source_stream[(index2 + 1)]
			self.stream[(index + 2)] = self.source_stream[(index2 + 2)]
		end
	end

	--[[
	for y=1, self.avatar_width do
		for x=1, self.avatar_height do
			local index = ((y-1) * (self.tilesource_width) * 3 + (x-1) * 3 + 1)
			self.stream[(index + 0)] = 0xff
			self.stream[(index + 1)] = 0x80
			self.stream[(index + 2)] = 0x10
		end
	end
	--]]

	--[[
	local xstart = 1
	local ystart = 1
	for y=ystart, self.avatar_width do
		for x=xstart, self.avatar_height do
			local index = ((ystart-1) * self.avatar_width + (xstart-1)) * 3
			self.stream[(index + 0) * self.tilesource_width] = 0xff
			self.stream[(index + 1) * self.tilesource_width] = 0x80
			self.stream[(index + 2) * self.tilesource_width] = 0x10
		end
	end	
	--]]

	self.resource_path = go.get("#sprite", "texture0")
	self.header = { width=self.width, height=self.height, type=resource.TEXTURE_TYPE_2D, format=resource.TEXTURE_FORMAT_RGB, num_mip_maps=1 }
	resource.set_texture( self.resource_path, self.header, self.buffer )
	self.images[id].status = true
end

local function download_image(self, image_url, callback, id, expected_width, expected_height)
	http.request(image_url, "GET", function(self, error, res)
		if (res.status == 200 or res.status == 302 or res.status == 304) then
			--pprint(res)
			local buf, w, h = png.decode_rgb(res.response, true)
			if expected_width ~= w or expected_height ~= h then
			end
			self.images[id] = {}
			self.images[id].data = buf
			callback(self, id)
		end
	end)
	
end



function init(self)
	self.images = {}
	
	download_image(self, "https://i.imgur.com/Y8JhMoR.png", do_image, 1)
	download_image(self, "https://i.imgur.com/iMPi3lq.png", do_image, 2)
	
	msg.post("#sprite", "disable")


end

function final(self)
	-- Add finalization code here
	-- Remove this function if not needed
end

function update(self, dt)

	--resource.set_texture( self.resource_path, self.header, self.buffer )
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	-- Add input-handling code here
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end
